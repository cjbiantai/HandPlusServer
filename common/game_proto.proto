syntax="proto3";
package GameProto;




//S2C事件码
enum ServerEventCode {
    //登录响应码
    //不需要额外字段
    LoginSucceed = 0;
    //不需要额外字段
    LoginFailed_InternalError = 1; 
    //不需要额外字段
    LoginFailed_AccountDontExist = 2;
    //不需要额外字段
    LoginFailed_PasswordWrong = 3;
    //不需要额外字段
    LoginFailed_AlreadyLogin = 4;




    //注册响应码
    //不需要额外字段
    RegisterSucceed = 5;
    //不需要额外字段
    RegisterFailed_InternalError = 6;
    //不需要额外字段
    RegisterFailed_AccountAlreadyExist = 7;




    //创建房间相关
    //需要RoomInfo[0]
    CreateRoomSucceed = 8;
    //不需要额外字段
    CreateRoomFailed_DontLogin = 9;
    //不需要额外字段
    CreateRoomFailed_AlreadyInRoom = 10;








    //进入房间响应码
    //需要RoomInfo[0]
    EnterRoomSucceed = 11;
    //不需要额外字段
    EnterRoomFailed_DontLogin = 12;
    //不需要额外字段
    EnterRoomFailed_RoomDontExist = 13;
    //不需要额外字段
    EnterRoomFailed_RoomIsFull = 14;
    //不需要额外字段
    EnterRoomFailed_AlreadyInRoom = 15;




    //退出房间相关响应码
    //不需要额外字段
    ExitRoomSucceed = 16; 
    //不需要额外字段
    ExitRoomFailed_DontLogin = 17;
    //不需要额外字段
    ExitRoomFailed_RoomDontExist = 18;
    //不需要额外字段
    ExitRoomFailed_DontInRoom = 19;




    //改变在房间中的状态响应码
    
    ChangeStateInRoomSucceed = 20;
    ChangeStateInRoomFailed_DontLogin = 21;
    ChangeStateInRoomFailed_DontInRoom = 22;




    //开始游戏相关响应码
    CanStartGame = 23;
    CannotStartGame = 24;




    //跳转到战斗服务器
    JumpToButtleServer = 25;
    
    //帧同步,type = S2CSync,inputs
    S2CSync = 26;
    
    BroadRoomInfo = 27;
    BroadRoomList = 28;
}








//C2S事件码
enum ClientEventCode {
    //登录
	Login = 0;
    //注册
	Regist = 1;
    //创建房间
	CreateRoom = 2;
    //加入房间
	EnterRoom = 3;
    //退出房间
	ExitRoom = 4;
    //客户端帧同步
	C2SSync = 5;
    //房间信息变化
	ChangeStateInRoom = 6;
    //登录服务器游戏开始
	StartGameBtnOnClick = 7;
}


enum S2SEventCode {
    //hall->game，房间创建
    PrepareRoom = 0;
    //game->hall，游戏结果
    ResultSync = 1;
}


//玩家信息 
message PlayerInfo{
    //玩家id，玩家的唯一标识
    int32 userId = 1;
    //账号名
    string account = 2;
    //密码
    string password = 3;
    //昵称
    string nickname = 4;
  
    //所在房间号  
    int32 roomId = 5;
    //玩家选择角色名
    string characterName = 6;
    //玩家选择的角色id
    int32 characterId = 7;
    //玩家是否准备
    bool prepared = 8;
}
//玩家一次操作
message PlayerInput{
    int32 userId = 1;


	//玩家头(视角)朝向
	int64 headTowardsX = 2;
	int64 headTowardsY = 3;
	int64 headTowardsZ = 4;


	//玩家移动速度
	int64 moveDirectionX = 5;
	int64 moveDirectionY = 6;


	//使用的道具在背包中的ID   技能也是道具
	int32 usePropsInPackID = 7;
}


message RoomInfo {
    //房间Id
    int32 roomId = 1;
    //单局时间
    int32 roundTime = 2;
    //局数
    int32 roundNumber = 3;
    //房间名
    string roomName = 4;
    //地图名
    string mapName = 5;
    //地图Id
    int32 mapIdx = 6;
    //房间密码
    string password = 7;
    //最大玩家数量
    int32 maxPlayers = 8;
    //当前玩家数量
    int32 curPlayerNumber = 9;
    //房间中的玩家信息
    repeated PlayerInfo Players = 10;
    //房主的Uid
    int32 masterUid = 11;
}


message S2SMsg{
    //S2S同步事件码
    S2SEventCode type = 1;
    //房间信息
    RoomInfo roomInfo = 2;
    //游戏结算信息
    //GameResult gameResult = 3; ???
}




//客户端数据包
message ClientMsg{
    //客户端事件码
	ClientEventCode type = 1;
    //玩家信息，在Login,Regist时需要填写，在ChangeStateInRoom时需要填写，其余不必
	PlayerInfo playerinfo = 2;
    //当前玩家输入
	PlayerInput input = 3 ;
	RoomInfo roominfo = 4;
}








//服务器数据包
message ServerMsg{
    //服务器事件码
	ServerEventCode type = 1;
    //描述字符串
	string str = 3;
    //跳转战斗服务器的ip
	string ip = 4;
    //跳转战斗服务器的端口
	int32 port = 5;
    //随机种子
    int32 nonce = 6;
    //服务器返回玩家信息，登录成功时会填写
	PlayerInfo playerInfo = 7;
    //房间所有玩家一帧的操作
	repeated PlayerInput inputs = 8;
    //房间信息，在type为BroadRoomInfo时，roominfos[0]代表当前房间内详细信息
    //在type为BroadRoomList时，roominfos代表房间列表信息
	repeated RoomInfo roominfos = 9;
}

