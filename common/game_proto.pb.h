// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_proto.proto

#ifndef PROTOBUF_game_5fproto_2eproto__INCLUDED
#define PROTOBUF_game_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_game_5fproto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPositionImpl();
void InitDefaultsPosition();
void InitDefaultsPlayerStateImpl();
void InitDefaultsPlayerState();
void InitDefaultsPlayerInputImpl();
void InitDefaultsPlayerInput();
void InitDefaultsClientMsgImpl();
void InitDefaultsClientMsg();
void InitDefaultsServerMsgImpl();
void InitDefaultsServerMsg();
inline void InitDefaults() {
  InitDefaultsPosition();
  InitDefaultsPlayerState();
  InitDefaultsPlayerInput();
  InitDefaultsClientMsg();
  InitDefaultsServerMsg();
}
}  // namespace protobuf_game_5fproto_2eproto
namespace GameProto {
class ClientMsg;
class ClientMsgDefaultTypeInternal;
extern ClientMsgDefaultTypeInternal _ClientMsg_default_instance_;
class PlayerInput;
class PlayerInputDefaultTypeInternal;
extern PlayerInputDefaultTypeInternal _PlayerInput_default_instance_;
class PlayerState;
class PlayerStateDefaultTypeInternal;
extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ServerMsg;
class ServerMsgDefaultTypeInternal;
extern ServerMsgDefaultTypeInternal _ServerMsg_default_instance_;
}  // namespace GameProto
namespace GameProto {

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:GameProto.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fproto_2eproto::TableStruct;
  friend void ::protobuf_game_5fproto_2eproto::InitDefaultsPositionImpl();
};
// -------------------------------------------------------------------

class PlayerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerState) */ {
 public:
  PlayerState();
  virtual ~PlayerState();

  PlayerState(const PlayerState& from);

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerState* other);
  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerState* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerState& from);
  void MergeFrom(const PlayerState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .GameProto.Position pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  const ::GameProto::Position& pos() const;
  ::GameProto::Position* release_pos();
  ::GameProto::Position* mutable_pos();
  void set_allocated_pos(::GameProto::Position* pos);

  // int32 fid = 1;
  void clear_fid();
  static const int kFidFieldNumber = 1;
  ::google::protobuf::int32 fid() const;
  void set_fid(::google::protobuf::int32 value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // int32 state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::GameProto::Position* pos_;
  ::google::protobuf::int32 fid_;
  float yaw_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fproto_2eproto::TableStruct;
  friend void ::protobuf_game_5fproto_2eproto::InitDefaultsPlayerStateImpl();
};
// -------------------------------------------------------------------

class PlayerInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerInput) */ {
 public:
  PlayerInput();
  virtual ~PlayerInput();

  PlayerInput(const PlayerInput& from);

  inline PlayerInput& operator=(const PlayerInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInput(PlayerInput&& from) noexcept
    : PlayerInput() {
    *this = ::std::move(from);
  }

  inline PlayerInput& operator=(PlayerInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInput* internal_default_instance() {
    return reinterpret_cast<const PlayerInput*>(
               &_PlayerInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerInput* other);
  friend void swap(PlayerInput& a, PlayerInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInput* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerInput& from);
  void MergeFrom(const PlayerInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float torque = 2;
  void clear_torque();
  static const int kTorqueFieldNumber = 2;
  float torque() const;
  void set_torque(float value);

  // bool grasp = 3;
  void clear_grasp();
  static const int kGraspFieldNumber = 3;
  bool grasp() const;
  void set_grasp(bool value);

  // bool attach = 4;
  void clear_attach();
  static const int kAttachFieldNumber = 4;
  bool attach() const;
  void set_attach(bool value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float torque_;
  bool grasp_;
  bool attach_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fproto_2eproto::TableStruct;
  friend void ::protobuf_game_5fproto_2eproto::InitDefaultsPlayerInputImpl();
};
// -------------------------------------------------------------------

class ClientMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ClientMsg) */ {
 public:
  ClientMsg();
  virtual ~ClientMsg();

  ClientMsg(const ClientMsg& from);

  inline ClientMsg& operator=(const ClientMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMsg(ClientMsg&& from) noexcept
    : ClientMsg() {
    *this = ::std::move(from);
  }

  inline ClientMsg& operator=(ClientMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMsg* internal_default_instance() {
    return reinterpret_cast<const ClientMsg*>(
               &_ClientMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ClientMsg* other);
  friend void swap(ClientMsg& a, ClientMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientMsg& from);
  void MergeFrom(const ClientMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .GameProto.PlayerInput input = 5;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 5;
  const ::GameProto::PlayerInput& input() const;
  ::GameProto::PlayerInput* release_input();
  ::GameProto::PlayerInput* mutable_input();
  void set_allocated_input(::GameProto::PlayerInput* input);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.ClientMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::GameProto::PlayerInput* input_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fproto_2eproto::TableStruct;
  friend void ::protobuf_game_5fproto_2eproto::InitDefaultsClientMsgImpl();
};
// -------------------------------------------------------------------

class ServerMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ServerMsg) */ {
 public:
  ServerMsg();
  virtual ~ServerMsg();

  ServerMsg(const ServerMsg& from);

  inline ServerMsg& operator=(const ServerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMsg(ServerMsg&& from) noexcept
    : ServerMsg() {
    *this = ::std::move(from);
  }

  inline ServerMsg& operator=(ServerMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMsg* internal_default_instance() {
    return reinterpret_cast<const ServerMsg*>(
               &_ServerMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ServerMsg* other);
  friend void swap(ServerMsg& a, ServerMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerMsg& from);
  void MergeFrom(const ServerMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.PlayerInput inputs = 4;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 4;
  const ::GameProto::PlayerInput& inputs(int index) const;
  ::GameProto::PlayerInput* mutable_inputs(int index);
  ::GameProto::PlayerInput* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >&
      inputs() const;

  // repeated .GameProto.PlayerState states = 5;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 5;
  const ::GameProto::PlayerState& states(int index) const;
  ::GameProto::PlayerState* mutable_states(int index);
  ::GameProto::PlayerState* add_states();
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >*
      mutable_states();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >&
      states() const;

  // string str = 3;
  void clear_str();
  static const int kStrFieldNumber = 3;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // int32 fid = 2;
  void clear_fid();
  static const int kFidFieldNumber = 2;
  ::google::protobuf::int32 fid() const;
  void set_fid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.ServerMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput > inputs_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState > states_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 fid_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fproto_2eproto::TableStruct;
  friend void ::protobuf_game_5fproto_2eproto::InitDefaultsServerMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.z)
}

// -------------------------------------------------------------------

// PlayerState

// int32 fid = 1;
inline void PlayerState::clear_fid() {
  fid_ = 0;
}
inline ::google::protobuf::int32 PlayerState::fid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.fid)
  return fid_;
}
inline void PlayerState::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.fid)
}

// string name = 2;
inline void PlayerState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerState::name() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.name)
  return name_.GetNoArena();
}
inline void PlayerState::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.name)
}
#if LANG_CXX11
inline void PlayerState::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerState.name)
}
#endif
inline void PlayerState::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerState.name)
}
inline void PlayerState::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerState.name)
}
inline ::std::string* PlayerState::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerState::release_name() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerState.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerState.name)
}

// float yaw = 3;
inline void PlayerState::clear_yaw() {
  yaw_ = 0;
}
inline float PlayerState::yaw() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.yaw)
  return yaw_;
}
inline void PlayerState::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.yaw)
}

// .GameProto.Position pos = 4;
inline bool PlayerState::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void PlayerState::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::GameProto::Position& PlayerState::pos() const {
  const ::GameProto::Position* p = pos_;
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::Position*>(
      &::GameProto::_Position_default_instance_);
}
inline ::GameProto::Position* PlayerState::release_pos() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerState.pos)
  
  ::GameProto::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::GameProto::Position* PlayerState::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::GameProto::Position;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerState.pos)
  return pos_;
}
inline void PlayerState::set_allocated_pos(::GameProto::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerState.pos)
}

// int32 state = 5;
inline void PlayerState::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 PlayerState::state() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.state)
  return state_;
}
inline void PlayerState::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.state)
}

// -------------------------------------------------------------------

// PlayerInput

// string name = 1;
inline void PlayerInput::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerInput::name() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.name)
  return name_.GetNoArena();
}
inline void PlayerInput::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.name)
}
#if LANG_CXX11
inline void PlayerInput::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.PlayerInput.name)
}
#endif
inline void PlayerInput::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInput.name)
}
inline void PlayerInput::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInput.name)
}
inline ::std::string* PlayerInput::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInput.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInput::release_name() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInput.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInput::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInput.name)
}

// float torque = 2;
inline void PlayerInput::clear_torque() {
  torque_ = 0;
}
inline float PlayerInput::torque() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.torque)
  return torque_;
}
inline void PlayerInput::set_torque(float value) {
  
  torque_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.torque)
}

// bool grasp = 3;
inline void PlayerInput::clear_grasp() {
  grasp_ = false;
}
inline bool PlayerInput::grasp() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.grasp)
  return grasp_;
}
inline void PlayerInput::set_grasp(bool value) {
  
  grasp_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.grasp)
}

// bool attach = 4;
inline void PlayerInput::clear_attach() {
  attach_ = false;
}
inline bool PlayerInput::attach() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.attach)
  return attach_;
}
inline void PlayerInput::set_attach(bool value) {
  
  attach_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.attach)
}

// -------------------------------------------------------------------

// ClientMsg

// int32 type = 1;
inline void ClientMsg::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ClientMsg::type() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.type)
  return type_;
}
inline void ClientMsg::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ClientMsg.type)
}

// string name = 2;
inline void ClientMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientMsg::name() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.name)
  return name_.GetNoArena();
}
inline void ClientMsg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ClientMsg.name)
}
#if LANG_CXX11
inline void ClientMsg::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.ClientMsg.name)
}
#endif
inline void ClientMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ClientMsg.name)
}
inline void ClientMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ClientMsg.name)
}
inline ::std::string* ClientMsg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMsg::release_name() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.name)
}

// string password = 3;
inline void ClientMsg::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientMsg::password() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.password)
  return password_.GetNoArena();
}
inline void ClientMsg::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ClientMsg.password)
}
#if LANG_CXX11
inline void ClientMsg::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.ClientMsg.password)
}
#endif
inline void ClientMsg::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ClientMsg.password)
}
inline void ClientMsg::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ClientMsg.password)
}
inline ::std::string* ClientMsg::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMsg::release_password() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMsg::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.password)
}

// int32 id = 4;
inline void ClientMsg::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ClientMsg::id() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.id)
  return id_;
}
inline void ClientMsg::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ClientMsg.id)
}

// .GameProto.PlayerInput input = 5;
inline bool ClientMsg::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void ClientMsg::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::GameProto::PlayerInput& ClientMsg::input() const {
  const ::GameProto::PlayerInput* p = input_;
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.input)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::PlayerInput*>(
      &::GameProto::_PlayerInput_default_instance_);
}
inline ::GameProto::PlayerInput* ClientMsg::release_input() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.input)
  
  ::GameProto::PlayerInput* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::GameProto::PlayerInput* ClientMsg::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::GameProto::PlayerInput;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.input)
  return input_;
}
inline void ClientMsg::set_allocated_input(::GameProto::PlayerInput* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.input)
}

// -------------------------------------------------------------------

// ServerMsg

// int32 code = 1;
inline void ServerMsg::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ServerMsg::code() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.code)
  return code_;
}
inline void ServerMsg::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.code)
}

// int32 fid = 2;
inline void ServerMsg::clear_fid() {
  fid_ = 0;
}
inline ::google::protobuf::int32 ServerMsg::fid() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.fid)
  return fid_;
}
inline void ServerMsg::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.fid)
}

// string str = 3;
inline void ServerMsg::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerMsg::str() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.str)
  return str_.GetNoArena();
}
inline void ServerMsg::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.str)
}
#if LANG_CXX11
inline void ServerMsg::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.ServerMsg.str)
}
#endif
inline void ServerMsg::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerMsg.str)
}
inline void ServerMsg::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerMsg.str)
}
inline ::std::string* ServerMsg::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMsg::release_str() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMsg::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.str)
}

// repeated .GameProto.PlayerInput inputs = 4;
inline int ServerMsg::inputs_size() const {
  return inputs_.size();
}
inline void ServerMsg::clear_inputs() {
  inputs_.Clear();
}
inline const ::GameProto::PlayerInput& ServerMsg::inputs(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.inputs)
  return inputs_.Get(index);
}
inline ::GameProto::PlayerInput* ServerMsg::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.inputs)
  return inputs_.Mutable(index);
}
inline ::GameProto::PlayerInput* ServerMsg::add_inputs() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >*
ServerMsg::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >&
ServerMsg::inputs() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.inputs)
  return inputs_;
}

// repeated .GameProto.PlayerState states = 5;
inline int ServerMsg::states_size() const {
  return states_.size();
}
inline void ServerMsg::clear_states() {
  states_.Clear();
}
inline const ::GameProto::PlayerState& ServerMsg::states(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.states)
  return states_.Get(index);
}
inline ::GameProto::PlayerState* ServerMsg::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.states)
  return states_.Mutable(index);
}
inline ::GameProto::PlayerState* ServerMsg::add_states() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.states)
  return states_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >*
ServerMsg::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.states)
  return &states_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >&
ServerMsg::states() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.states)
  return states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fproto_2eproto__INCLUDED
