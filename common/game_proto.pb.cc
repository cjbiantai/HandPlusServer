// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameProto {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerEventCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientEventCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fproto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_game_5fproto_2eproto() {
  protobuf_AddDesc_game_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_proto.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  PlayerInfo_descriptor_ = file->message_type(1);
  static const int PlayerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, charactername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, prepared_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _is_default_instance_));
  PlayerState_descriptor_ = file->message_type(2);
  static const int PlayerState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, state_),
  };
  PlayerState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerState_descriptor_,
      PlayerState::default_instance_,
      PlayerState_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _is_default_instance_));
  PlayerInput_descriptor_ = file->message_type(3);
  static const int PlayerInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, headtowardsx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, headtowardsy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, headtowardsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, movedirectionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, movedirectiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, usepropsinpackid_),
  };
  PlayerInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInput_descriptor_,
      PlayerInput::default_instance_,
      PlayerInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, _is_default_instance_));
  RoomInfo_descriptor_ = file->message_type(4);
  static const int RoomInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roundtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roundnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, maxplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, curplayernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, master_),
  };
  RoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _is_default_instance_));
  ClientMsg_descriptor_ = file->message_type(5);
  static const int ClientMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, roominfo_),
  };
  ClientMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientMsg_descriptor_,
      ClientMsg::default_instance_,
      ClientMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _is_default_instance_));
  ServerMsg_descriptor_ = file->message_type(6);
  static const int ServerMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, framid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, roominfos_),
  };
  ServerMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerMsg_descriptor_,
      ServerMsg::default_instance_,
      ServerMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _is_default_instance_));
  ServerEventCode_descriptor_ = file->enum_type(0);
  ClientEventCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerState_descriptor_, &PlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInput_descriptor_, &PlayerInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientMsg_descriptor_, &ClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerMsg_descriptor_, &ServerMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fproto_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete PlayerState::default_instance_;
  delete PlayerState_reflection_;
  delete PlayerInput::default_instance_;
  delete PlayerInput_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete ClientMsg::default_instance_;
  delete ClientMsg_reflection_;
  delete ServerMsg::default_instance_;
  delete ServerMsg_reflection_;
}

void protobuf_AddDesc_game_5fproto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_game_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020game_proto.proto\022\tGameProto\"+\n\010Positio"
    "n\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\207\001\n\nP"
    "layerInfo\022\013\n\003uid\030\001 \001(\005\022\017\n\007account\030\002 \001(\t\022"
    "\020\n\010password\030\003 \001(\t\022\020\n\010nickname\030\004 \001(\t\022\016\n\006r"
    "oomid\030\005 \001(\005\022\025\n\rcharacterName\030\006 \001(\t\022\020\n\010pr"
    "epared\030\007 \001(\010\"f\n\013PlayerState\022\013\n\003fid\030\001 \001(\005"
    "\022\014\n\004name\030\002 \001(\t\022\013\n\003yaw\030\003 \001(\002\022 \n\003pos\030\004 \001(\013"
    "2\023.GameProto.Position\022\r\n\005state\030\005 \001(\005\"\246\001\n"
    "\013PlayerInput\022\013\n\003uid\030\001 \001(\005\022\024\n\014headTowards"
    "X\030\002 \001(\003\022\024\n\014headTowardsY\030\003 \001(\003\022\024\n\014headTow"
    "ardsZ\030\004 \001(\003\022\026\n\016moveDirectionX\030\005 \001(\003\022\026\n\016m"
    "oveDirectionY\030\006 \001(\003\022\030\n\020usePropsInPackID\030"
    "\007 \001(\005\"\330\001\n\010RoomInfo\022\n\n\002id\030\001 \001(\005\022\021\n\troundT"
    "ime\030\002 \001(\005\022\023\n\013roundNumber\030\003 \001(\005\022\020\n\010roomNa"
    "me\030\004 \001(\t\022\017\n\007mapName\030\005 \001(\t\022\020\n\010password\030\006 "
    "\001(\t\022\022\n\nmaxPlayers\030\007 \001(\005\022\027\n\017curPlayerNumb"
    "er\030\010 \001(\005\022&\n\007Players\030\t \003(\0132\025.GameProto.Pl"
    "ayerInfo\022\016\n\006master\030\n \001(\005\"\256\001\n\tClientMsg\022("
    "\n\004type\030\001 \001(\0162\032.GameProto.ClientEventCode"
    "\022)\n\nplayerinfo\030\002 \001(\0132\025.GameProto.PlayerI"
    "nfo\022%\n\005input\030\003 \001(\0132\026.GameProto.PlayerInp"
    "ut\022%\n\010roominfo\030\004 \001(\0132\023.GameProto.RoomInf"
    "o\"\234\002\n\tServerMsg\022(\n\004type\030\001 \001(\0162\032.GameProt"
    "o.ServerEventCode\022\013\n\003fid\030\002 \001(\005\022\013\n\003str\030\003 "
    "\001(\t\022\n\n\002ip\030\004 \001(\t\022\014\n\004port\030\005 \001(\005\022)\n\nplayerI"
    "nfo\030\006 \001(\0132\025.GameProto.PlayerInfo\022\016\n\006fram"
    "ID\030\007 \001(\005\022&\n\006inputs\030\010 \003(\0132\026.GameProto.Pla"
    "yerInput\022&\n\006states\030\t \003(\0132\026.GameProto.Pla"
    "yerState\022&\n\troominfos\030\n \003(\0132\023.GameProto."
    "RoomInfo*\240\004\n\017ServerEventCode\022\020\n\014LogInSuc"
    "cess\020\000\022\023\n\017RegisterSuccess\020\001\022\024\n\020EnterRoom"
    "Success\020\002\022\037\n\033LogInError_AccountDontExist"
    "\020\003\022\034\n\030LogInError_PasswordWrong\020\004\022\026\n\022LogI"
    "nError_ReLogIn\020\005\022%\n!RegisterError_Accoun"
    "tAlreadyExist\020\006\022\034\n\030EnterRoomError_DontLo"
    "gIn\020\007\022\035\n\031EnterRoomError_RoomIsFull\020\010\022\037\n\033"
    "EnterRoomError_RoomDontExit\020\t\022\021\n\rInterna"
    "lError\020\n\022\025\n\021BroadRoomListInfo\020\013\022\021\n\rBroad"
    "RoomInfo\020\014\022\026\n\022JumpToBattleServer\020\r\022\013\n\007S2"
    "CSync\020\016\022\023\n\017ExitRoomSuccess\020\017\022\033\n\027ExitRoom"
    "Error_DontLogIn\020\020\022\035\n\031ExitRoomError_RoomI"
    "sEmpty\020\021\022\025\n\021CreateRoomSuccess\020\022\022\024\n\020Start"
    "GameFailure\020\023\022\024\n\020StartGameSuccess\020\024*\224\001\n\017"
    "ClientEventCode\022\t\n\005LogIn\020\000\022\n\n\006Regist\020\001\022\016"
    "\n\nCreateRoom\020\002\022\r\n\tEnterRoom\020\003\022\014\n\010ExitRoo"
    "m\020\004\022\013\n\007C2SSync\020\005\022\n\n\006Follow\020\006\022\025\n\021ChangeSt"
    "ateInRoom\020\007\022\r\n\tStartGame\020\010b\006proto3", 1874);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_proto.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  PlayerInfo::default_instance_ = new PlayerInfo();
  PlayerState::default_instance_ = new PlayerState();
  PlayerInput::default_instance_ = new PlayerInput();
  RoomInfo::default_instance_ = new RoomInfo();
  ClientMsg::default_instance_ = new ClientMsg();
  ServerMsg::default_instance_ = new ServerMsg();
  Position::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  PlayerState::default_instance_->InitAsDefaultInstance();
  PlayerInput::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  ClientMsg::default_instance_->InitAsDefaultInstance();
  ServerMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fproto_2eproto {
  StaticDescriptorInitializer_game_5fproto_2eproto() {
    protobuf_AddDesc_game_5fproto_2eproto();
  }
} static_descriptor_initializer_game_5fproto_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerEventCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerEventCode_descriptor_;
}
bool ServerEventCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientEventCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEventCode_descriptor_;
}
bool ClientEventCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:GameProto.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.Position)
  return target;
}

int Position::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.Position)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional float x = 1;
void Position::clear_x() {
  x_ = 0;
}
 float Position::x() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.x)
  return x_;
}
 void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.x)
}

// optional float y = 2;
void Position::clear_y() {
  y_ = 0;
}
 float Position::y() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.y)
  return y_;
}
 void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.y)
}

// optional float z = 3;
void Position::clear_z() {
  z_ = 0;
}
 float Position::z() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.z)
  return z_;
}
 void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kUidFieldNumber;
const int PlayerInfo::kAccountFieldNumber;
const int PlayerInfo::kPasswordFieldNumber;
const int PlayerInfo::kNicknameFieldNumber;
const int PlayerInfo::kRoomidFieldNumber;
const int PlayerInfo::kCharacterNameFieldNumber;
const int PlayerInfo::kPreparedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  charactername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prepared_ = false;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charactername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, roomid_);
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charactername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prepared_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerInfo.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerInfo.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 5;
      case 5: {
        if (tag == 40) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_characterName;
        break;
      }

      // optional string characterName = 6;
      case 6: {
        if (tag == 50) {
         parse_characterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charactername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->charactername().data(), this->charactername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerInfo.characterName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_prepared;
        break;
      }

      // optional bool prepared = 7;
      case 7: {
        if (tag == 56) {
         parse_prepared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prepared_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerInfo)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 roomid = 5;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  // optional string characterName = 6;
  if (this->charactername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->charactername().data(), this->charactername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.characterName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->charactername(), output);
  }

  // optional bool prepared = 7;
  if (this->prepared() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->prepared(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerInfo)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 roomid = 5;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  // optional string characterName = 6;
  if (this->charactername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->charactername().data(), this->charactername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerInfo.characterName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->charactername(), target);
  }

  // optional bool prepared = 7;
  if (this->prepared() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->prepared(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerInfo)
  int total_size = 0;

  // optional int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // optional string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional int32 roomid = 5;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomid());
  }

  // optional string characterName = 6;
  if (this->charactername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->charactername());
  }

  // optional bool prepared = 7;
  if (this->prepared() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.charactername().size() > 0) {

    charactername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charactername_);
  }
  if (from.prepared() != 0) {
    set_prepared(from.prepared());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  std::swap(uid_, other->uid_);
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  nickname_.Swap(&other->nickname_);
  std::swap(roomid_, other->roomid_);
  charactername_.Swap(&other->charactername_);
  std::swap(prepared_, other->prepared_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional int32 uid = 1;
void PlayerInfo::clear_uid() {
  uid_ = 0;
}
 ::google::protobuf::int32 PlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.uid)
  return uid_;
}
 void PlayerInfo::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.uid)
}

// optional string account = 2;
void PlayerInfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::account() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.account)
}
 void PlayerInfo::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.account)
}
 void PlayerInfo::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.account)
}
 ::std::string* PlayerInfo::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_account() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.account)
}

// optional string password = 3;
void PlayerInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::password() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.password)
}
 void PlayerInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.password)
}
 void PlayerInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.password)
}
 ::std::string* PlayerInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_password() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.password)
}

// optional string nickname = 4;
void PlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.nickname)
}
 void PlayerInfo::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.nickname)
}
 void PlayerInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.nickname)
}
 ::std::string* PlayerInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.nickname)
}

// optional int32 roomid = 5;
void PlayerInfo::clear_roomid() {
  roomid_ = 0;
}
 ::google::protobuf::int32 PlayerInfo::roomid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.roomid)
  return roomid_;
}
 void PlayerInfo::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.roomid)
}

// optional string characterName = 6;
void PlayerInfo::clear_charactername() {
  charactername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::charactername() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.characterName)
  return charactername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_charactername(const ::std::string& value) {
  
  charactername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.characterName)
}
 void PlayerInfo::set_charactername(const char* value) {
  
  charactername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.characterName)
}
 void PlayerInfo::set_charactername(const char* value, size_t size) {
  
  charactername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.characterName)
}
 ::std::string* PlayerInfo::mutable_charactername() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.characterName)
  return charactername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_charactername() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.characterName)
  
  return charactername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_charactername(::std::string* charactername) {
  if (charactername != NULL) {
    
  } else {
    
  }
  charactername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charactername);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.characterName)
}

// optional bool prepared = 7;
void PlayerInfo::clear_prepared() {
  prepared_ = false;
}
 bool PlayerInfo::prepared() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.prepared)
  return prepared_;
}
 void PlayerInfo::set_prepared(bool value) {
  
  prepared_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.prepared)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerState::kFidFieldNumber;
const int PlayerState::kNameFieldNumber;
const int PlayerState::kYawFieldNumber;
const int PlayerState::kPosFieldNumber;
const int PlayerState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerState::PlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerState)
}

void PlayerState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::GameProto::Position*>(&::GameProto::Position::default_instance());
}

PlayerState::PlayerState(const PlayerState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerState)
}

void PlayerState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fid_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaw_ = 0;
  pos_ = NULL;
  state_ = 0;
}

PlayerState::~PlayerState() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerState)
  SharedDtor();
}

void PlayerState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerState_descriptor_;
}

const PlayerState& PlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

PlayerState* PlayerState::default_instance_ = NULL;

PlayerState* PlayerState::New(::google::protobuf::Arena* arena) const {
  PlayerState* n = new PlayerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fid_, yaw_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
  state_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.PlayerState.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yaw;
        break;
      }

      // optional float yaw = 3;
      case 3: {
        if (tag == 29) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GameProto.Position pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerState)
  return false;
#undef DO_
}

void PlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerState)
  // optional int32 fid = 1;
  if (this->fid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  // optional .GameProto.Position pos = 4;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_, output);
  }

  // optional int32 state = 5;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.PlayerState)
}

::google::protobuf::uint8* PlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerState)
  // optional int32 fid = 1;
  if (this->fid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.PlayerState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  // optional .GameProto.Position pos = 4;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_, false, target);
  }

  // optional int32 state = 5;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerState)
  return target;
}

int PlayerState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerState)
  int total_size = 0;

  // optional int32 fid = 1;
  if (this->fid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // optional .GameProto.Position pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional int32 state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerState)
    MergeFrom(*source);
  }
}

void PlayerState::MergeFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.fid() != 0) {
    set_fid(from.fid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.has_pos()) {
    mutable_pos()->::GameProto::Position::MergeFrom(from.pos());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void PlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerState::CopyFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {

  return true;
}

void PlayerState::Swap(PlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerState::InternalSwap(PlayerState* other) {
  std::swap(fid_, other->fid_);
  name_.Swap(&other->name_);
  std::swap(yaw_, other->yaw_);
  std::swap(pos_, other->pos_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerState_descriptor_;
  metadata.reflection = PlayerState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerState

// optional int32 fid = 1;
void PlayerState::clear_fid() {
  fid_ = 0;
}
 ::google::protobuf::int32 PlayerState::fid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.fid)
  return fid_;
}
 void PlayerState::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.fid)
}

// optional string name = 2;
void PlayerState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerState::name() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerState::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.name)
}
 void PlayerState::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerState.name)
}
 void PlayerState::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerState.name)
}
 ::std::string* PlayerState::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerState::release_name() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerState.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerState.name)
}

// optional float yaw = 3;
void PlayerState::clear_yaw() {
  yaw_ = 0;
}
 float PlayerState::yaw() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.yaw)
  return yaw_;
}
 void PlayerState::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.yaw)
}

// optional .GameProto.Position pos = 4;
bool PlayerState::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void PlayerState::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::GameProto::Position& PlayerState::pos() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::GameProto::Position* PlayerState::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::GameProto::Position;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerState.pos)
  return pos_;
}
::GameProto::Position* PlayerState::release_pos() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerState.pos)
  
  ::GameProto::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
void PlayerState::set_allocated_pos(::GameProto::Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerState.pos)
}

// optional int32 state = 5;
void PlayerState::clear_state() {
  state_ = 0;
}
 ::google::protobuf::int32 PlayerState::state() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.state)
  return state_;
}
 void PlayerState::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInput::kUidFieldNumber;
const int PlayerInput::kHeadTowardsXFieldNumber;
const int PlayerInput::kHeadTowardsYFieldNumber;
const int PlayerInput::kHeadTowardsZFieldNumber;
const int PlayerInput::kMoveDirectionXFieldNumber;
const int PlayerInput::kMoveDirectionYFieldNumber;
const int PlayerInput::kUsePropsInPackIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInput::PlayerInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.PlayerInput)
}

void PlayerInput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerInput::PlayerInput(const PlayerInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.PlayerInput)
}

void PlayerInput::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0;
  headtowardsx_ = GOOGLE_LONGLONG(0);
  headtowardsy_ = GOOGLE_LONGLONG(0);
  headtowardsz_ = GOOGLE_LONGLONG(0);
  movedirectionx_ = GOOGLE_LONGLONG(0);
  movedirectiony_ = GOOGLE_LONGLONG(0);
  usepropsinpackid_ = 0;
}

PlayerInput::~PlayerInput() {
  // @@protoc_insertion_point(destructor:GameProto.PlayerInput)
  SharedDtor();
}

void PlayerInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInput_descriptor_;
}

const PlayerInput& PlayerInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

PlayerInput* PlayerInput::default_instance_ = NULL;

PlayerInput* PlayerInput::New(::google::protobuf::Arena* arena) const {
  PlayerInput* n = new PlayerInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInput::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.PlayerInput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(headtowardsx_, movedirectiony_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.PlayerInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_headTowardsX;
        break;
      }

      // optional int64 headTowardsX = 2;
      case 2: {
        if (tag == 16) {
         parse_headTowardsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &headtowardsx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_headTowardsY;
        break;
      }

      // optional int64 headTowardsY = 3;
      case 3: {
        if (tag == 24) {
         parse_headTowardsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &headtowardsy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_headTowardsZ;
        break;
      }

      // optional int64 headTowardsZ = 4;
      case 4: {
        if (tag == 32) {
         parse_headTowardsZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &headtowardsz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_moveDirectionX;
        break;
      }

      // optional int64 moveDirectionX = 5;
      case 5: {
        if (tag == 40) {
         parse_moveDirectionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movedirectionx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_moveDirectionY;
        break;
      }

      // optional int64 moveDirectionY = 6;
      case 6: {
        if (tag == 48) {
         parse_moveDirectionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &movedirectiony_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usePropsInPackID;
        break;
      }

      // optional int32 usePropsInPackID = 7;
      case 7: {
        if (tag == 56) {
         parse_usePropsInPackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usepropsinpackid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.PlayerInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.PlayerInput)
  return false;
#undef DO_
}

void PlayerInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.PlayerInput)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int64 headTowardsX = 2;
  if (this->headtowardsx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->headtowardsx(), output);
  }

  // optional int64 headTowardsY = 3;
  if (this->headtowardsy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->headtowardsy(), output);
  }

  // optional int64 headTowardsZ = 4;
  if (this->headtowardsz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->headtowardsz(), output);
  }

  // optional int64 moveDirectionX = 5;
  if (this->movedirectionx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->movedirectionx(), output);
  }

  // optional int64 moveDirectionY = 6;
  if (this->movedirectiony() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->movedirectiony(), output);
  }

  // optional int32 usePropsInPackID = 7;
  if (this->usepropsinpackid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usepropsinpackid(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.PlayerInput)
}

::google::protobuf::uint8* PlayerInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.PlayerInput)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int64 headTowardsX = 2;
  if (this->headtowardsx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->headtowardsx(), target);
  }

  // optional int64 headTowardsY = 3;
  if (this->headtowardsy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->headtowardsy(), target);
  }

  // optional int64 headTowardsZ = 4;
  if (this->headtowardsz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->headtowardsz(), target);
  }

  // optional int64 moveDirectionX = 5;
  if (this->movedirectionx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->movedirectionx(), target);
  }

  // optional int64 moveDirectionY = 6;
  if (this->movedirectiony() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->movedirectiony(), target);
  }

  // optional int32 usePropsInPackID = 7;
  if (this->usepropsinpackid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usepropsinpackid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.PlayerInput)
  return target;
}

int PlayerInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.PlayerInput)
  int total_size = 0;

  // optional int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // optional int64 headTowardsX = 2;
  if (this->headtowardsx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->headtowardsx());
  }

  // optional int64 headTowardsY = 3;
  if (this->headtowardsy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->headtowardsy());
  }

  // optional int64 headTowardsZ = 4;
  if (this->headtowardsz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->headtowardsz());
  }

  // optional int64 moveDirectionX = 5;
  if (this->movedirectionx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movedirectionx());
  }

  // optional int64 moveDirectionY = 6;
  if (this->movedirectiony() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->movedirectiony());
  }

  // optional int32 usePropsInPackID = 7;
  if (this->usepropsinpackid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usepropsinpackid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.PlayerInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.PlayerInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.PlayerInput)
    MergeFrom(*source);
  }
}

void PlayerInput::MergeFrom(const PlayerInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.PlayerInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.headtowardsx() != 0) {
    set_headtowardsx(from.headtowardsx());
  }
  if (from.headtowardsy() != 0) {
    set_headtowardsy(from.headtowardsy());
  }
  if (from.headtowardsz() != 0) {
    set_headtowardsz(from.headtowardsz());
  }
  if (from.movedirectionx() != 0) {
    set_movedirectionx(from.movedirectionx());
  }
  if (from.movedirectiony() != 0) {
    set_movedirectiony(from.movedirectiony());
  }
  if (from.usepropsinpackid() != 0) {
    set_usepropsinpackid(from.usepropsinpackid());
  }
}

void PlayerInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.PlayerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInput::CopyFrom(const PlayerInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.PlayerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInput::IsInitialized() const {

  return true;
}

void PlayerInput::Swap(PlayerInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInput::InternalSwap(PlayerInput* other) {
  std::swap(uid_, other->uid_);
  std::swap(headtowardsx_, other->headtowardsx_);
  std::swap(headtowardsy_, other->headtowardsy_);
  std::swap(headtowardsz_, other->headtowardsz_);
  std::swap(movedirectionx_, other->movedirectionx_);
  std::swap(movedirectiony_, other->movedirectiony_);
  std::swap(usepropsinpackid_, other->usepropsinpackid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInput_descriptor_;
  metadata.reflection = PlayerInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInput

// optional int32 uid = 1;
void PlayerInput::clear_uid() {
  uid_ = 0;
}
 ::google::protobuf::int32 PlayerInput::uid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.uid)
  return uid_;
}
 void PlayerInput::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.uid)
}

// optional int64 headTowardsX = 2;
void PlayerInput::clear_headtowardsx() {
  headtowardsx_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerInput::headtowardsx() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.headTowardsX)
  return headtowardsx_;
}
 void PlayerInput::set_headtowardsx(::google::protobuf::int64 value) {
  
  headtowardsx_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.headTowardsX)
}

// optional int64 headTowardsY = 3;
void PlayerInput::clear_headtowardsy() {
  headtowardsy_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerInput::headtowardsy() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.headTowardsY)
  return headtowardsy_;
}
 void PlayerInput::set_headtowardsy(::google::protobuf::int64 value) {
  
  headtowardsy_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.headTowardsY)
}

// optional int64 headTowardsZ = 4;
void PlayerInput::clear_headtowardsz() {
  headtowardsz_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerInput::headtowardsz() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.headTowardsZ)
  return headtowardsz_;
}
 void PlayerInput::set_headtowardsz(::google::protobuf::int64 value) {
  
  headtowardsz_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.headTowardsZ)
}

// optional int64 moveDirectionX = 5;
void PlayerInput::clear_movedirectionx() {
  movedirectionx_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerInput::movedirectionx() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.moveDirectionX)
  return movedirectionx_;
}
 void PlayerInput::set_movedirectionx(::google::protobuf::int64 value) {
  
  movedirectionx_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.moveDirectionX)
}

// optional int64 moveDirectionY = 6;
void PlayerInput::clear_movedirectiony() {
  movedirectiony_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerInput::movedirectiony() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.moveDirectionY)
  return movedirectiony_;
}
 void PlayerInput::set_movedirectiony(::google::protobuf::int64 value) {
  
  movedirectiony_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.moveDirectionY)
}

// optional int32 usePropsInPackID = 7;
void PlayerInput::clear_usepropsinpackid() {
  usepropsinpackid_ = 0;
}
 ::google::protobuf::int32 PlayerInput::usepropsinpackid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.usePropsInPackID)
  return usepropsinpackid_;
}
 void PlayerInput::set_usepropsinpackid(::google::protobuf::int32 value) {
  
  usepropsinpackid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.usePropsInPackID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfo::kIdFieldNumber;
const int RoomInfo::kRoundTimeFieldNumber;
const int RoomInfo::kRoundNumberFieldNumber;
const int RoomInfo::kRoomNameFieldNumber;
const int RoomInfo::kMapNameFieldNumber;
const int RoomInfo::kPasswordFieldNumber;
const int RoomInfo::kMaxPlayersFieldNumber;
const int RoomInfo::kCurPlayerNumberFieldNumber;
const int RoomInfo::kPlayersFieldNumber;
const int RoomInfo::kMasterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfo::RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.RoomInfo)
}

void RoomInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  roundtime_ = 0;
  roundnumber_ = 0;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_ = 0;
  curplayernumber_ = 0;
  master_ = 0;
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:GameProto.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New(::google::protobuf::Arena* arena) const {
  RoomInfo* n = new RoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.RoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, roundtime_);
  ZR_(roundnumber_, maxplayers_);
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curplayernumber_ = 0;
  master_ = 0;

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roundTime;
        break;
      }

      // optional int32 roundTime = 2;
      case 2: {
        if (tag == 16) {
         parse_roundTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roundNumber;
        break;
      }

      // optional int32 roundNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_roundNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundnumber_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomName;
        break;
      }

      // optional string roomName = 4;
      case 4: {
        if (tag == 34) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.RoomInfo.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mapName;
        break;
      }

      // optional string mapName = 5;
      case 5: {
        if (tag == 42) {
         parse_mapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.RoomInfo.mapName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (tag == 50) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.RoomInfo.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxPlayers;
        break;
      }

      // optional int32 maxPlayers = 7;
      case 7: {
        if (tag == 56) {
         parse_maxPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_curPlayerNumber;
        break;
      }

      // optional int32 curPlayerNumber = 8;
      case 8: {
        if (tag == 64) {
         parse_curPlayerNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curplayernumber_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Players;
        break;
      }

      // repeated .GameProto.PlayerInfo Players = 9;
      case 9: {
        if (tag == 74) {
         parse_Players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_Players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_master;
        break;
      }

      // optional int32 master = 10;
      case 10: {
        if (tag == 80) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.RoomInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 roundTime = 2;
  if (this->roundtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roundtime(), output);
  }

  // optional int32 roundNumber = 3;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roundnumber(), output);
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoomInfo.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  // optional string mapName = 5;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoomInfo.mapName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mapname(), output);
  }

  // optional string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoomInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // optional int32 maxPlayers = 7;
  if (this->maxplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxplayers(), output);
  }

  // optional int32 curPlayerNumber = 8;
  if (this->curplayernumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curplayernumber(), output);
  }

  // repeated .GameProto.PlayerInfo Players = 9;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->players(i), output);
  }

  // optional int32 master = 10;
  if (this->master() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->master(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.RoomInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 roundTime = 2;
  if (this->roundtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roundtime(), target);
  }

  // optional int32 roundNumber = 3;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roundnumber(), target);
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoomInfo.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // optional string mapName = 5;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoomInfo.mapName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mapname(), target);
  }

  // optional string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.RoomInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // optional int32 maxPlayers = 7;
  if (this->maxplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxplayers(), target);
  }

  // optional int32 curPlayerNumber = 8;
  if (this->curplayernumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curplayernumber(), target);
  }

  // repeated .GameProto.PlayerInfo Players = 9;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->players(i), false, target);
  }

  // optional int32 master = 10;
  if (this->master() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->master(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.RoomInfo)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 roundTime = 2;
  if (this->roundtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roundtime());
  }

  // optional int32 roundNumber = 3;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roundnumber());
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // optional string mapName = 5;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  // optional string password = 6;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional int32 maxPlayers = 7;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());
  }

  // optional int32 curPlayerNumber = 8;
  if (this->curplayernumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curplayernumber());
  }

  // optional int32 master = 10;
  if (this->master() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->master());
  }

  // repeated .GameProto.PlayerInfo Players = 9;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.RoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.RoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.roundtime() != 0) {
    set_roundtime(from.roundtime());
  }
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.mapname().size() > 0) {

    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.maxplayers() != 0) {
    set_maxplayers(from.maxplayers());
  }
  if (from.curplayernumber() != 0) {
    set_curplayernumber(from.curplayernumber());
  }
  if (from.master() != 0) {
    set_master(from.master());
  }
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfo::InternalSwap(RoomInfo* other) {
  std::swap(id_, other->id_);
  std::swap(roundtime_, other->roundtime_);
  std::swap(roundnumber_, other->roundnumber_);
  roomname_.Swap(&other->roomname_);
  mapname_.Swap(&other->mapname_);
  password_.Swap(&other->password_);
  std::swap(maxplayers_, other->maxplayers_);
  std::swap(curplayernumber_, other->curplayernumber_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(master_, other->master_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomInfo

// optional int32 id = 1;
void RoomInfo::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 RoomInfo::id() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.id)
  return id_;
}
 void RoomInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.id)
}

// optional int32 roundTime = 2;
void RoomInfo::clear_roundtime() {
  roundtime_ = 0;
}
 ::google::protobuf::int32 RoomInfo::roundtime() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.roundTime)
  return roundtime_;
}
 void RoomInfo::set_roundtime(::google::protobuf::int32 value) {
  
  roundtime_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.roundTime)
}

// optional int32 roundNumber = 3;
void RoomInfo::clear_roundnumber() {
  roundnumber_ = 0;
}
 ::google::protobuf::int32 RoomInfo::roundnumber() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.roundNumber)
  return roundnumber_;
}
 void RoomInfo::set_roundnumber(::google::protobuf::int32 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.roundNumber)
}

// optional string roomName = 4;
void RoomInfo::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomInfo::roomname() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomInfo::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.roomName)
}
 void RoomInfo::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoomInfo.roomName)
}
 void RoomInfo::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoomInfo.roomName)
}
 ::std::string* RoomInfo::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomInfo::release_roomname() {
  // @@protoc_insertion_point(field_release:GameProto.RoomInfo.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomInfo::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoomInfo.roomName)
}

// optional string mapName = 5;
void RoomInfo::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomInfo::mapname() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.mapName)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomInfo::set_mapname(const ::std::string& value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.mapName)
}
 void RoomInfo::set_mapname(const char* value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoomInfo.mapName)
}
 void RoomInfo::set_mapname(const char* value, size_t size) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoomInfo.mapName)
}
 ::std::string* RoomInfo::mutable_mapname() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.mapName)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomInfo::release_mapname() {
  // @@protoc_insertion_point(field_release:GameProto.RoomInfo.mapName)
  
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomInfo::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    
  } else {
    
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoomInfo.mapName)
}

// optional string password = 6;
void RoomInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomInfo::password() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.password)
}
 void RoomInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoomInfo.password)
}
 void RoomInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoomInfo.password)
}
 ::std::string* RoomInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomInfo::release_password() {
  // @@protoc_insertion_point(field_release:GameProto.RoomInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoomInfo.password)
}

// optional int32 maxPlayers = 7;
void RoomInfo::clear_maxplayers() {
  maxplayers_ = 0;
}
 ::google::protobuf::int32 RoomInfo::maxplayers() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.maxPlayers)
  return maxplayers_;
}
 void RoomInfo::set_maxplayers(::google::protobuf::int32 value) {
  
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.maxPlayers)
}

// optional int32 curPlayerNumber = 8;
void RoomInfo::clear_curplayernumber() {
  curplayernumber_ = 0;
}
 ::google::protobuf::int32 RoomInfo::curplayernumber() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.curPlayerNumber)
  return curplayernumber_;
}
 void RoomInfo::set_curplayernumber(::google::protobuf::int32 value) {
  
  curplayernumber_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.curPlayerNumber)
}

// repeated .GameProto.PlayerInfo Players = 9;
int RoomInfo::players_size() const {
  return players_.size();
}
void RoomInfo::clear_players() {
  players_.Clear();
}
const ::GameProto::PlayerInfo& RoomInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.Players)
  return players_.Get(index);
}
::GameProto::PlayerInfo* RoomInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.Players)
  return players_.Mutable(index);
}
::GameProto::PlayerInfo* RoomInfo::add_players() {
  // @@protoc_insertion_point(field_add:GameProto.RoomInfo.Players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo >*
RoomInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.RoomInfo.Players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo >&
RoomInfo::players() const {
  // @@protoc_insertion_point(field_list:GameProto.RoomInfo.Players)
  return players_;
}

// optional int32 master = 10;
void RoomInfo::clear_master() {
  master_ = 0;
}
 ::google::protobuf::int32 RoomInfo::master() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.master)
  return master_;
}
 void RoomInfo::set_master(::google::protobuf::int32 value) {
  
  master_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.master)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMsg::kTypeFieldNumber;
const int ClientMsg::kPlayerinfoFieldNumber;
const int ClientMsg::kInputFieldNumber;
const int ClientMsg::kRoominfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMsg::ClientMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.ClientMsg)
}

void ClientMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  playerinfo_ = const_cast< ::GameProto::PlayerInfo*>(&::GameProto::PlayerInfo::default_instance());
  input_ = const_cast< ::GameProto::PlayerInput*>(&::GameProto::PlayerInput::default_instance());
  roominfo_ = const_cast< ::GameProto::RoomInfo*>(&::GameProto::RoomInfo::default_instance());
}

ClientMsg::ClientMsg(const ClientMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.ClientMsg)
}

void ClientMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  playerinfo_ = NULL;
  input_ = NULL;
  roominfo_ = NULL;
}

ClientMsg::~ClientMsg() {
  // @@protoc_insertion_point(destructor:GameProto.ClientMsg)
  SharedDtor();
}

void ClientMsg::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
    delete input_;
    delete roominfo_;
  }
}

void ClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMsg_descriptor_;
}

const ClientMsg& ClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

ClientMsg* ClientMsg::default_instance_ = NULL;

ClientMsg* ClientMsg::New(::google::protobuf::Arena* arena) const {
  ClientMsg* n = new ClientMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.ClientMsg)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && roominfo_ != NULL) delete roominfo_;
  roominfo_ = NULL;
}

bool ClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.ClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameProto.ClientEventCode type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::GameProto::ClientEventCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerinfo;
        break;
      }

      // optional .GameProto.PlayerInfo playerinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_playerinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // optional .GameProto.PlayerInput input = 3;
      case 3: {
        if (tag == 26) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roominfo;
        break;
      }

      // optional .GameProto.RoomInfo roominfo = 4;
      case 4: {
        if (tag == 34) {
         parse_roominfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.ClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.ClientMsg)
  return false;
#undef DO_
}

void ClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.ClientMsg)
  // optional .GameProto.ClientEventCode type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .GameProto.PlayerInfo playerinfo = 2;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerinfo_, output);
  }

  // optional .GameProto.PlayerInput input = 3;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->input_, output);
  }

  // optional .GameProto.RoomInfo roominfo = 4;
  if (this->has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->roominfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.ClientMsg)
}

::google::protobuf::uint8* ClientMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.ClientMsg)
  // optional .GameProto.ClientEventCode type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .GameProto.PlayerInfo playerinfo = 2;
  if (this->has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->playerinfo_, false, target);
  }

  // optional .GameProto.PlayerInput input = 3;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->input_, false, target);
  }

  // optional .GameProto.RoomInfo roominfo = 4;
  if (this->has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->roominfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.ClientMsg)
  return target;
}

int ClientMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.ClientMsg)
  int total_size = 0;

  // optional .GameProto.ClientEventCode type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .GameProto.PlayerInfo playerinfo = 2;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  // optional .GameProto.PlayerInput input = 3;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  // optional .GameProto.RoomInfo roominfo = 4;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roominfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.ClientMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.ClientMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.ClientMsg)
    MergeFrom(*source);
  }
}

void ClientMsg::MergeFrom(const ClientMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.ClientMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::GameProto::PlayerInfo::MergeFrom(from.playerinfo());
  }
  if (from.has_input()) {
    mutable_input()->::GameProto::PlayerInput::MergeFrom(from.input());
  }
  if (from.has_roominfo()) {
    mutable_roominfo()->::GameProto::RoomInfo::MergeFrom(from.roominfo());
  }
}

void ClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.ClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsg::CopyFrom(const ClientMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.ClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsg::IsInitialized() const {

  return true;
}

void ClientMsg::Swap(ClientMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMsg::InternalSwap(ClientMsg* other) {
  std::swap(type_, other->type_);
  std::swap(playerinfo_, other->playerinfo_);
  std::swap(input_, other->input_);
  std::swap(roominfo_, other->roominfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMsg_descriptor_;
  metadata.reflection = ClientMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMsg

// optional .GameProto.ClientEventCode type = 1;
void ClientMsg::clear_type() {
  type_ = 0;
}
 ::GameProto::ClientEventCode ClientMsg::type() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.type)
  return static_cast< ::GameProto::ClientEventCode >(type_);
}
 void ClientMsg::set_type(::GameProto::ClientEventCode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ClientMsg.type)
}

// optional .GameProto.PlayerInfo playerinfo = 2;
bool ClientMsg::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void ClientMsg::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::GameProto::PlayerInfo& ClientMsg::playerinfo() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.playerinfo)
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
::GameProto::PlayerInfo* ClientMsg::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::GameProto::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.playerinfo)
  return playerinfo_;
}
::GameProto::PlayerInfo* ClientMsg::release_playerinfo() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.playerinfo)
  
  ::GameProto::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_playerinfo(::GameProto::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.playerinfo)
}

// optional .GameProto.PlayerInput input = 3;
bool ClientMsg::has_input() const {
  return !_is_default_instance_ && input_ != NULL;
}
void ClientMsg::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::GameProto::PlayerInput& ClientMsg::input() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
::GameProto::PlayerInput* ClientMsg::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::GameProto::PlayerInput;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.input)
  return input_;
}
::GameProto::PlayerInput* ClientMsg::release_input() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.input)
  
  ::GameProto::PlayerInput* temp = input_;
  input_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_input(::GameProto::PlayerInput* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.input)
}

// optional .GameProto.RoomInfo roominfo = 4;
bool ClientMsg::has_roominfo() const {
  return !_is_default_instance_ && roominfo_ != NULL;
}
void ClientMsg::clear_roominfo() {
  if (GetArenaNoVirtual() == NULL && roominfo_ != NULL) delete roominfo_;
  roominfo_ = NULL;
}
const ::GameProto::RoomInfo& ClientMsg::roominfo() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.roominfo)
  return roominfo_ != NULL ? *roominfo_ : *default_instance_->roominfo_;
}
::GameProto::RoomInfo* ClientMsg::mutable_roominfo() {
  
  if (roominfo_ == NULL) {
    roominfo_ = new ::GameProto::RoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.roominfo)
  return roominfo_;
}
::GameProto::RoomInfo* ClientMsg::release_roominfo() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.roominfo)
  
  ::GameProto::RoomInfo* temp = roominfo_;
  roominfo_ = NULL;
  return temp;
}
void ClientMsg::set_allocated_roominfo(::GameProto::RoomInfo* roominfo) {
  delete roominfo_;
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.roominfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMsg::kTypeFieldNumber;
const int ServerMsg::kFidFieldNumber;
const int ServerMsg::kStrFieldNumber;
const int ServerMsg::kIpFieldNumber;
const int ServerMsg::kPortFieldNumber;
const int ServerMsg::kPlayerInfoFieldNumber;
const int ServerMsg::kFramIDFieldNumber;
const int ServerMsg::kInputsFieldNumber;
const int ServerMsg::kStatesFieldNumber;
const int ServerMsg::kRoominfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMsg::ServerMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.ServerMsg)
}

void ServerMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  playerinfo_ = const_cast< ::GameProto::PlayerInfo*>(&::GameProto::PlayerInfo::default_instance());
}

ServerMsg::ServerMsg(const ServerMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameProto.ServerMsg)
}

void ServerMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  fid_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  playerinfo_ = NULL;
  framid_ = 0;
}

ServerMsg::~ServerMsg() {
  // @@protoc_insertion_point(destructor:GameProto.ServerMsg)
  SharedDtor();
}

void ServerMsg::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void ServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMsg_descriptor_;
}

const ServerMsg& ServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fproto_2eproto();
  return *default_instance_;
}

ServerMsg* ServerMsg::default_instance_ = NULL;

ServerMsg* ServerMsg::New(::google::protobuf::Arena* arena) const {
  ServerMsg* n = new ServerMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.ServerMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, fid_);
  ZR_(port_, framid_);
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  inputs_.Clear();
  states_.Clear();
  roominfos_.Clear();
}

bool ServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.ServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameProto.ServerEventCode type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::GameProto::ServerEventCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fid;
        break;
      }

      // optional int32 fid = 2;
      case 2: {
        if (tag == 16) {
         parse_fid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_str;
        break;
      }

      // optional string str = 3;
      case 3: {
        if (tag == 26) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.ServerMsg.str"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameProto.ServerMsg.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerInfo;
        break;
      }

      // optional .GameProto.PlayerInfo playerInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_framID;
        break;
      }

      // optional int32 framID = 7;
      case 7: {
        if (tag == 56) {
         parse_framID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_inputs;
        break;
      }

      // repeated .GameProto.PlayerInput inputs = 8;
      case 8: {
        if (tag == 66) {
         parse_inputs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_inputs;
        if (input->ExpectTag(74)) goto parse_loop_states;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .GameProto.PlayerState states = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_states;
        if (input->ExpectTag(82)) goto parse_loop_roominfos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .GameProto.RoomInfo roominfos = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_roominfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roominfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_roominfos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.ServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.ServerMsg)
  return false;
#undef DO_
}

void ServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.ServerMsg)
  // optional .GameProto.ServerEventCode type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 fid = 2;
  if (this->fid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fid(), output);
  }

  // optional string str = 3;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerMsg.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->str(), output);
  }

  // optional string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerMsg.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // optional int32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional .GameProto.PlayerInfo playerInfo = 6;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->playerinfo_, output);
  }

  // optional int32 framID = 7;
  if (this->framid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->framid(), output);
  }

  // repeated .GameProto.PlayerInput inputs = 8;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->inputs(i), output);
  }

  // repeated .GameProto.PlayerState states = 9;
  for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->states(i), output);
  }

  // repeated .GameProto.RoomInfo roominfos = 10;
  for (unsigned int i = 0, n = this->roominfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->roominfos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GameProto.ServerMsg)
}

::google::protobuf::uint8* ServerMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.ServerMsg)
  // optional .GameProto.ServerEventCode type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 fid = 2;
  if (this->fid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fid(), target);
  }

  // optional string str = 3;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerMsg.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str(), target);
  }

  // optional string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameProto.ServerMsg.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional .GameProto.PlayerInfo playerInfo = 6;
  if (this->has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->playerinfo_, false, target);
  }

  // optional int32 framID = 7;
  if (this->framid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->framid(), target);
  }

  // repeated .GameProto.PlayerInput inputs = 8;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->inputs(i), false, target);
  }

  // repeated .GameProto.PlayerState states = 9;
  for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->states(i), false, target);
  }

  // repeated .GameProto.RoomInfo roominfos = 10;
  for (unsigned int i = 0, n = this->roominfos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->roominfos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameProto.ServerMsg)
  return target;
}

int ServerMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.ServerMsg)
  int total_size = 0;

  // optional .GameProto.ServerEventCode type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 fid = 2;
  if (this->fid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fid());
  }

  // optional string str = 3;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  // optional string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // optional .GameProto.PlayerInfo playerInfo = 6;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  // optional int32 framID = 7;
  if (this->framid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->framid());
  }

  // repeated .GameProto.PlayerInput inputs = 8;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .GameProto.PlayerState states = 9;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  // repeated .GameProto.RoomInfo roominfos = 10;
  total_size += 1 * this->roominfos_size();
  for (int i = 0; i < this->roominfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roominfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.ServerMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.ServerMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.ServerMsg)
    MergeFrom(*source);
  }
}

void ServerMsg::MergeFrom(const ServerMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.ServerMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  inputs_.MergeFrom(from.inputs_);
  states_.MergeFrom(from.states_);
  roominfos_.MergeFrom(from.roominfos_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.fid() != 0) {
    set_fid(from.fid());
  }
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::GameProto::PlayerInfo::MergeFrom(from.playerinfo());
  }
  if (from.framid() != 0) {
    set_framid(from.framid());
  }
}

void ServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.ServerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMsg::CopyFrom(const ServerMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.ServerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsg::IsInitialized() const {

  return true;
}

void ServerMsg::Swap(ServerMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMsg::InternalSwap(ServerMsg* other) {
  std::swap(type_, other->type_);
  std::swap(fid_, other->fid_);
  str_.Swap(&other->str_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(playerinfo_, other->playerinfo_);
  std::swap(framid_, other->framid_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  states_.UnsafeArenaSwap(&other->states_);
  roominfos_.UnsafeArenaSwap(&other->roominfos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMsg_descriptor_;
  metadata.reflection = ServerMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMsg

// optional .GameProto.ServerEventCode type = 1;
void ServerMsg::clear_type() {
  type_ = 0;
}
 ::GameProto::ServerEventCode ServerMsg::type() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.type)
  return static_cast< ::GameProto::ServerEventCode >(type_);
}
 void ServerMsg::set_type(::GameProto::ServerEventCode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.type)
}

// optional int32 fid = 2;
void ServerMsg::clear_fid() {
  fid_ = 0;
}
 ::google::protobuf::int32 ServerMsg::fid() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.fid)
  return fid_;
}
 void ServerMsg::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.fid)
}

// optional string str = 3;
void ServerMsg::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServerMsg::str() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerMsg::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.str)
}
 void ServerMsg::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerMsg.str)
}
 void ServerMsg::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerMsg.str)
}
 ::std::string* ServerMsg::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerMsg::release_str() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerMsg::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.str)
}

// optional string ip = 4;
void ServerMsg::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServerMsg::ip() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerMsg::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.ip)
}
 void ServerMsg::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerMsg.ip)
}
 void ServerMsg::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerMsg.ip)
}
 ::std::string* ServerMsg::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerMsg::release_ip() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerMsg::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.ip)
}

// optional int32 port = 5;
void ServerMsg::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 ServerMsg::port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.port)
  return port_;
}
 void ServerMsg::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.port)
}

// optional .GameProto.PlayerInfo playerInfo = 6;
bool ServerMsg::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void ServerMsg::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::GameProto::PlayerInfo& ServerMsg::playerinfo() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.playerInfo)
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
::GameProto::PlayerInfo* ServerMsg::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::GameProto::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.playerInfo)
  return playerinfo_;
}
::GameProto::PlayerInfo* ServerMsg::release_playerinfo() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.playerInfo)
  
  ::GameProto::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void ServerMsg::set_allocated_playerinfo(::GameProto::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.playerInfo)
}

// optional int32 framID = 7;
void ServerMsg::clear_framid() {
  framid_ = 0;
}
 ::google::protobuf::int32 ServerMsg::framid() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.framID)
  return framid_;
}
 void ServerMsg::set_framid(::google::protobuf::int32 value) {
  
  framid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.framID)
}

// repeated .GameProto.PlayerInput inputs = 8;
int ServerMsg::inputs_size() const {
  return inputs_.size();
}
void ServerMsg::clear_inputs() {
  inputs_.Clear();
}
const ::GameProto::PlayerInput& ServerMsg::inputs(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.inputs)
  return inputs_.Get(index);
}
::GameProto::PlayerInput* ServerMsg::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.inputs)
  return inputs_.Mutable(index);
}
::GameProto::PlayerInput* ServerMsg::add_inputs() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >*
ServerMsg::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >&
ServerMsg::inputs() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.inputs)
  return inputs_;
}

// repeated .GameProto.PlayerState states = 9;
int ServerMsg::states_size() const {
  return states_.size();
}
void ServerMsg::clear_states() {
  states_.Clear();
}
const ::GameProto::PlayerState& ServerMsg::states(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.states)
  return states_.Get(index);
}
::GameProto::PlayerState* ServerMsg::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.states)
  return states_.Mutable(index);
}
::GameProto::PlayerState* ServerMsg::add_states() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.states)
  return states_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >*
ServerMsg::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.states)
  return &states_;
}
const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >&
ServerMsg::states() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.states)
  return states_;
}

// repeated .GameProto.RoomInfo roominfos = 10;
int ServerMsg::roominfos_size() const {
  return roominfos_.size();
}
void ServerMsg::clear_roominfos() {
  roominfos_.Clear();
}
const ::GameProto::RoomInfo& ServerMsg::roominfos(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.roominfos)
  return roominfos_.Get(index);
}
::GameProto::RoomInfo* ServerMsg::mutable_roominfos(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.roominfos)
  return roominfos_.Mutable(index);
}
::GameProto::RoomInfo* ServerMsg::add_roominfos() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.roominfos)
  return roominfos_.Add();
}
::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo >*
ServerMsg::mutable_roominfos() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.roominfos)
  return &roominfos_;
}
const ::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo >&
ServerMsg::roominfos() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.roominfos)
  return roominfos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

// @@protoc_insertion_point(global_scope)
