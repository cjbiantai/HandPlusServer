// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_proto.proto

#ifndef PROTOBUF_game_5fproto_2eproto__INCLUDED
#define PROTOBUF_game_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GameProto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_game_5fproto_2eproto();
void protobuf_AssignDesc_game_5fproto_2eproto();
void protobuf_ShutdownFile_game_5fproto_2eproto();

class ClientMsg;
class PlayerInfo;
class PlayerInput;
class PlayerState;
class Position;
class RoomInfo;
class ServerMsg;

enum ServerEventCode {
  LogInSuccess = 0,
  RegisterSuccess = 1,
  EnterRoomSuccess = 2,
  LogInError_AccountDontExist = 3,
  LogInError_PasswordWrong = 4,
  LogInError_ReLogIn = 5,
  RegisterError_AccountAlreadyExist = 6,
  EnterRoomError_DontLogIn = 7,
  EnterRoomError_RoomIsFull = 8,
  EnterRoomError_RoomDontExit = 9,
  InternalError = 10,
  BroadRoomListInfo = 11,
  BroadRoomInfo = 12,
  JumpToBattleServer = 13,
  S2CSync = 14,
  ExitRoomSuccess = 15,
  ExitRoomError_DontLogIn = 16,
  ExitRoomError_RoomIsEmpty = 17,
  CreateRoomSuccess = 18,
  StartGameFailure = 19,
  StartGameSuccess = 20,
  ServerEventCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerEventCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerEventCode_IsValid(int value);
const ServerEventCode ServerEventCode_MIN = LogInSuccess;
const ServerEventCode ServerEventCode_MAX = StartGameSuccess;
const int ServerEventCode_ARRAYSIZE = ServerEventCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerEventCode_descriptor();
inline const ::std::string& ServerEventCode_Name(ServerEventCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerEventCode_descriptor(), value);
}
inline bool ServerEventCode_Parse(
    const ::std::string& name, ServerEventCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerEventCode>(
    ServerEventCode_descriptor(), name, value);
}
enum ClientEventCode {
  LogIn = 0,
  Regist = 1,
  CreateRoom = 2,
  EnterRoom = 3,
  ExitRoom = 4,
  C2SSync = 5,
  Follow = 6,
  ChangeStateInRoom = 7,
  StartGame = 8,
  ClientEventCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientEventCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientEventCode_IsValid(int value);
const ClientEventCode ClientEventCode_MIN = LogIn;
const ClientEventCode ClientEventCode_MAX = StartGame;
const int ClientEventCode_ARRAYSIZE = ClientEventCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientEventCode_descriptor();
inline const ::std::string& ClientEventCode_Name(ClientEventCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientEventCode_descriptor(), value);
}
inline bool ClientEventCode_Parse(
    const ::std::string& name, ClientEventCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientEventCode>(
    ClientEventCode_descriptor(), name, value);
}
// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  inline Position* New() const { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:GameProto.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerInfo) */ {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const { return New(NULL); }

  PlayerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // optional string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string nickname = 4;
  void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 roomid = 5;
  void clear_roomid();
  static const int kRoomidFieldNumber = 5;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional string characterName = 6;
  void clear_charactername();
  static const int kCharacterNameFieldNumber = 6;
  const ::std::string& charactername() const;
  void set_charactername(const ::std::string& value);
  void set_charactername(const char* value);
  void set_charactername(const char* value, size_t size);
  ::std::string* mutable_charactername();
  ::std::string* release_charactername();
  void set_allocated_charactername(::std::string* charactername);

  // optional bool prepared = 7;
  void clear_prepared();
  static const int kPreparedFieldNumber = 7;
  bool prepared() const;
  void set_prepared(bool value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr charactername_;
  bool prepared_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerState) */ {
 public:
  PlayerState();
  virtual ~PlayerState();

  PlayerState(const PlayerState& from);

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerState& default_instance();

  void Swap(PlayerState* other);

  // implements Message ----------------------------------------------

  inline PlayerState* New() const { return New(NULL); }

  PlayerState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerState& from);
  void MergeFrom(const PlayerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fid = 1;
  void clear_fid();
  static const int kFidFieldNumber = 1;
  ::google::protobuf::int32 fid() const;
  void set_fid(::google::protobuf::int32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // optional .GameProto.Position pos = 4;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  const ::GameProto::Position& pos() const;
  ::GameProto::Position* mutable_pos();
  ::GameProto::Position* release_pos();
  void set_allocated_pos(::GameProto::Position* pos);

  // optional int32 state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 fid_;
  float yaw_;
  ::GameProto::Position* pos_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PlayerState* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.PlayerInput) */ {
 public:
  PlayerInput();
  virtual ~PlayerInput();

  PlayerInput(const PlayerInput& from);

  inline PlayerInput& operator=(const PlayerInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInput& default_instance();

  void Swap(PlayerInput* other);

  // implements Message ----------------------------------------------

  inline PlayerInput* New() const { return New(NULL); }

  PlayerInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInput& from);
  void MergeFrom(const PlayerInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // optional int64 headTowardsX = 2;
  void clear_headtowardsx();
  static const int kHeadTowardsXFieldNumber = 2;
  ::google::protobuf::int64 headtowardsx() const;
  void set_headtowardsx(::google::protobuf::int64 value);

  // optional int64 headTowardsY = 3;
  void clear_headtowardsy();
  static const int kHeadTowardsYFieldNumber = 3;
  ::google::protobuf::int64 headtowardsy() const;
  void set_headtowardsy(::google::protobuf::int64 value);

  // optional int64 headTowardsZ = 4;
  void clear_headtowardsz();
  static const int kHeadTowardsZFieldNumber = 4;
  ::google::protobuf::int64 headtowardsz() const;
  void set_headtowardsz(::google::protobuf::int64 value);

  // optional int64 moveDirectionX = 5;
  void clear_movedirectionx();
  static const int kMoveDirectionXFieldNumber = 5;
  ::google::protobuf::int64 movedirectionx() const;
  void set_movedirectionx(::google::protobuf::int64 value);

  // optional int64 moveDirectionY = 6;
  void clear_movedirectiony();
  static const int kMoveDirectionYFieldNumber = 6;
  ::google::protobuf::int64 movedirectiony() const;
  void set_movedirectiony(::google::protobuf::int64 value);

  // optional int32 usePropsInPackID = 7;
  void clear_usepropsinpackid();
  static const int kUsePropsInPackIDFieldNumber = 7;
  ::google::protobuf::int32 usepropsinpackid() const;
  void set_usepropsinpackid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.PlayerInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 headtowardsx_;
  ::google::protobuf::int64 headtowardsy_;
  ::google::protobuf::int64 headtowardsz_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 usepropsinpackid_;
  ::google::protobuf::int64 movedirectionx_;
  ::google::protobuf::int64 movedirectiony_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PlayerInput* default_instance_;
};
// -------------------------------------------------------------------

class RoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.RoomInfo) */ {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfo& default_instance();

  void Swap(RoomInfo* other);

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const { return New(NULL); }

  RoomInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 roundTime = 2;
  void clear_roundtime();
  static const int kRoundTimeFieldNumber = 2;
  ::google::protobuf::int32 roundtime() const;
  void set_roundtime(::google::protobuf::int32 value);

  // optional int32 roundNumber = 3;
  void clear_roundnumber();
  static const int kRoundNumberFieldNumber = 3;
  ::google::protobuf::int32 roundnumber() const;
  void set_roundnumber(::google::protobuf::int32 value);

  // optional string roomName = 4;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  const ::std::string& roomname() const;
  void set_roomname(const ::std::string& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  ::std::string* mutable_roomname();
  ::std::string* release_roomname();
  void set_allocated_roomname(::std::string* roomname);

  // optional string mapName = 5;
  void clear_mapname();
  static const int kMapNameFieldNumber = 5;
  const ::std::string& mapname() const;
  void set_mapname(const ::std::string& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  ::std::string* mutable_mapname();
  ::std::string* release_mapname();
  void set_allocated_mapname(::std::string* mapname);

  // optional string password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional int32 maxPlayers = 7;
  void clear_maxplayers();
  static const int kMaxPlayersFieldNumber = 7;
  ::google::protobuf::int32 maxplayers() const;
  void set_maxplayers(::google::protobuf::int32 value);

  // optional int32 curPlayerNumber = 8;
  void clear_curplayernumber();
  static const int kCurPlayerNumberFieldNumber = 8;
  ::google::protobuf::int32 curplayernumber() const;
  void set_curplayernumber(::google::protobuf::int32 value);

  // repeated .GameProto.PlayerInfo Players = 9;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 9;
  const ::GameProto::PlayerInfo& players(int index) const;
  ::GameProto::PlayerInfo* mutable_players(int index);
  ::GameProto::PlayerInfo* add_players();
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo >&
      players() const;

  // optional int32 master = 10;
  void clear_master();
  static const int kMasterFieldNumber = 10;
  ::google::protobuf::int32 master() const;
  void set_master(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.RoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 roundtime_;
  ::google::protobuf::internal::ArenaStringPtr roomname_;
  ::google::protobuf::internal::ArenaStringPtr mapname_;
  ::google::protobuf::int32 roundnumber_;
  ::google::protobuf::int32 maxplayers_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo > players_;
  ::google::protobuf::int32 curplayernumber_;
  ::google::protobuf::int32 master_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static RoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ClientMsg) */ {
 public:
  ClientMsg();
  virtual ~ClientMsg();

  ClientMsg(const ClientMsg& from);

  inline ClientMsg& operator=(const ClientMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMsg& default_instance();

  void Swap(ClientMsg* other);

  // implements Message ----------------------------------------------

  inline ClientMsg* New() const { return New(NULL); }

  ClientMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMsg& from);
  void MergeFrom(const ClientMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GameProto.ClientEventCode type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::GameProto::ClientEventCode type() const;
  void set_type(::GameProto::ClientEventCode value);

  // optional .GameProto.PlayerInfo playerinfo = 2;
  bool has_playerinfo() const;
  void clear_playerinfo();
  static const int kPlayerinfoFieldNumber = 2;
  const ::GameProto::PlayerInfo& playerinfo() const;
  ::GameProto::PlayerInfo* mutable_playerinfo();
  ::GameProto::PlayerInfo* release_playerinfo();
  void set_allocated_playerinfo(::GameProto::PlayerInfo* playerinfo);

  // optional .GameProto.PlayerInput input = 3;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::GameProto::PlayerInput& input() const;
  ::GameProto::PlayerInput* mutable_input();
  ::GameProto::PlayerInput* release_input();
  void set_allocated_input(::GameProto::PlayerInput* input);

  // optional .GameProto.RoomInfo roominfo = 4;
  bool has_roominfo() const;
  void clear_roominfo();
  static const int kRoominfoFieldNumber = 4;
  const ::GameProto::RoomInfo& roominfo() const;
  ::GameProto::RoomInfo* mutable_roominfo();
  ::GameProto::RoomInfo* release_roominfo();
  void set_allocated_roominfo(::GameProto::RoomInfo* roominfo);

  // @@protoc_insertion_point(class_scope:GameProto.ClientMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::GameProto::PlayerInfo* playerinfo_;
  ::GameProto::PlayerInput* input_;
  ::GameProto::RoomInfo* roominfo_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static ClientMsg* default_instance_;
};
// -------------------------------------------------------------------

class ServerMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ServerMsg) */ {
 public:
  ServerMsg();
  virtual ~ServerMsg();

  ServerMsg(const ServerMsg& from);

  inline ServerMsg& operator=(const ServerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMsg& default_instance();

  void Swap(ServerMsg* other);

  // implements Message ----------------------------------------------

  inline ServerMsg* New() const { return New(NULL); }

  ServerMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMsg& from);
  void MergeFrom(const ServerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GameProto.ServerEventCode type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::GameProto::ServerEventCode type() const;
  void set_type(::GameProto::ServerEventCode value);

  // optional int32 fid = 2;
  void clear_fid();
  static const int kFidFieldNumber = 2;
  ::google::protobuf::int32 fid() const;
  void set_fid(::google::protobuf::int32 value);

  // optional string str = 3;
  void clear_str();
  static const int kStrFieldNumber = 3;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // optional string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional .GameProto.PlayerInfo playerInfo = 6;
  bool has_playerinfo() const;
  void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 6;
  const ::GameProto::PlayerInfo& playerinfo() const;
  ::GameProto::PlayerInfo* mutable_playerinfo();
  ::GameProto::PlayerInfo* release_playerinfo();
  void set_allocated_playerinfo(::GameProto::PlayerInfo* playerinfo);

  // optional int32 framID = 7;
  void clear_framid();
  static const int kFramIDFieldNumber = 7;
  ::google::protobuf::int32 framid() const;
  void set_framid(::google::protobuf::int32 value);

  // repeated .GameProto.PlayerInput inputs = 8;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 8;
  const ::GameProto::PlayerInput& inputs(int index) const;
  ::GameProto::PlayerInput* mutable_inputs(int index);
  ::GameProto::PlayerInput* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >&
      inputs() const;

  // repeated .GameProto.PlayerState states = 9;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 9;
  const ::GameProto::PlayerState& states(int index) const;
  ::GameProto::PlayerState* mutable_states(int index);
  ::GameProto::PlayerState* add_states();
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >*
      mutable_states();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >&
      states() const;

  // repeated .GameProto.RoomInfo roominfos = 10;
  int roominfos_size() const;
  void clear_roominfos();
  static const int kRoominfosFieldNumber = 10;
  const ::GameProto::RoomInfo& roominfos(int index) const;
  ::GameProto::RoomInfo* mutable_roominfos(int index);
  ::GameProto::RoomInfo* add_roominfos();
  ::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo >*
      mutable_roominfos();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo >&
      roominfos() const;

  // @@protoc_insertion_point(class_scope:GameProto.ServerMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  ::google::protobuf::int32 fid_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::GameProto::PlayerInfo* playerinfo_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 framid_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput > inputs_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState > states_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo > roominfos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fproto_2eproto();
  friend void protobuf_AssignDesc_game_5fproto_2eproto();
  friend void protobuf_ShutdownFile_game_5fproto_2eproto();

  void InitAsDefaultInstance();
  static ServerMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.x)
}

// optional float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.y)
}

// optional float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:GameProto.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Position.z)
}

// -------------------------------------------------------------------

// PlayerInfo

// optional int32 uid = 1;
inline void PlayerInfo::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 PlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.uid)
  return uid_;
}
inline void PlayerInfo::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.uid)
}

// optional string account = 2;
inline void PlayerInfo::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerInfo::account() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.account)
}
inline void PlayerInfo::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.account)
}
inline void PlayerInfo::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.account)
}
inline ::std::string* PlayerInfo::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInfo::release_account() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.account)
}

// optional string password = 3;
inline void PlayerInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerInfo::password() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.password)
}
inline void PlayerInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.password)
}
inline void PlayerInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.password)
}
inline ::std::string* PlayerInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInfo::release_password() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.password)
}

// optional string nickname = 4;
inline void PlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.nickname)
}
inline void PlayerInfo::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.nickname)
}
inline void PlayerInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.nickname)
}
inline ::std::string* PlayerInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.nickname)
}

// optional int32 roomid = 5;
inline void PlayerInfo::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 PlayerInfo::roomid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.roomid)
  return roomid_;
}
inline void PlayerInfo::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.roomid)
}

// optional string characterName = 6;
inline void PlayerInfo::clear_charactername() {
  charactername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerInfo::charactername() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.characterName)
  return charactername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_charactername(const ::std::string& value) {
  
  charactername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.characterName)
}
inline void PlayerInfo::set_charactername(const char* value) {
  
  charactername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerInfo.characterName)
}
inline void PlayerInfo::set_charactername(const char* value, size_t size) {
  
  charactername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerInfo.characterName)
}
inline ::std::string* PlayerInfo::mutable_charactername() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerInfo.characterName)
  return charactername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInfo::release_charactername() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerInfo.characterName)
  
  return charactername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInfo::set_allocated_charactername(::std::string* charactername) {
  if (charactername != NULL) {
    
  } else {
    
  }
  charactername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charactername);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerInfo.characterName)
}

// optional bool prepared = 7;
inline void PlayerInfo::clear_prepared() {
  prepared_ = false;
}
inline bool PlayerInfo::prepared() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInfo.prepared)
  return prepared_;
}
inline void PlayerInfo::set_prepared(bool value) {
  
  prepared_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInfo.prepared)
}

// -------------------------------------------------------------------

// PlayerState

// optional int32 fid = 1;
inline void PlayerState::clear_fid() {
  fid_ = 0;
}
inline ::google::protobuf::int32 PlayerState::fid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.fid)
  return fid_;
}
inline void PlayerState::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.fid)
}

// optional string name = 2;
inline void PlayerState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerState::name() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerState::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.name)
}
inline void PlayerState::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.PlayerState.name)
}
inline void PlayerState::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.PlayerState.name)
}
inline ::std::string* PlayerState::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerState::release_name() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerState.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerState.name)
}

// optional float yaw = 3;
inline void PlayerState::clear_yaw() {
  yaw_ = 0;
}
inline float PlayerState::yaw() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.yaw)
  return yaw_;
}
inline void PlayerState::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.yaw)
}

// optional .GameProto.Position pos = 4;
inline bool PlayerState::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
inline void PlayerState::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::GameProto::Position& PlayerState::pos() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::GameProto::Position* PlayerState::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::GameProto::Position;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.PlayerState.pos)
  return pos_;
}
inline ::GameProto::Position* PlayerState::release_pos() {
  // @@protoc_insertion_point(field_release:GameProto.PlayerState.pos)
  
  ::GameProto::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PlayerState::set_allocated_pos(::GameProto::Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.PlayerState.pos)
}

// optional int32 state = 5;
inline void PlayerState::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 PlayerState::state() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerState.state)
  return state_;
}
inline void PlayerState::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerState.state)
}

// -------------------------------------------------------------------

// PlayerInput

// optional int32 uid = 1;
inline void PlayerInput::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::uid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.uid)
  return uid_;
}
inline void PlayerInput::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.uid)
}

// optional int64 headTowardsX = 2;
inline void PlayerInput::clear_headtowardsx() {
  headtowardsx_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerInput::headtowardsx() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.headTowardsX)
  return headtowardsx_;
}
inline void PlayerInput::set_headtowardsx(::google::protobuf::int64 value) {
  
  headtowardsx_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.headTowardsX)
}

// optional int64 headTowardsY = 3;
inline void PlayerInput::clear_headtowardsy() {
  headtowardsy_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerInput::headtowardsy() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.headTowardsY)
  return headtowardsy_;
}
inline void PlayerInput::set_headtowardsy(::google::protobuf::int64 value) {
  
  headtowardsy_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.headTowardsY)
}

// optional int64 headTowardsZ = 4;
inline void PlayerInput::clear_headtowardsz() {
  headtowardsz_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerInput::headtowardsz() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.headTowardsZ)
  return headtowardsz_;
}
inline void PlayerInput::set_headtowardsz(::google::protobuf::int64 value) {
  
  headtowardsz_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.headTowardsZ)
}

// optional int64 moveDirectionX = 5;
inline void PlayerInput::clear_movedirectionx() {
  movedirectionx_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerInput::movedirectionx() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.moveDirectionX)
  return movedirectionx_;
}
inline void PlayerInput::set_movedirectionx(::google::protobuf::int64 value) {
  
  movedirectionx_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.moveDirectionX)
}

// optional int64 moveDirectionY = 6;
inline void PlayerInput::clear_movedirectiony() {
  movedirectiony_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerInput::movedirectiony() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.moveDirectionY)
  return movedirectiony_;
}
inline void PlayerInput::set_movedirectiony(::google::protobuf::int64 value) {
  
  movedirectiony_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.moveDirectionY)
}

// optional int32 usePropsInPackID = 7;
inline void PlayerInput::clear_usepropsinpackid() {
  usepropsinpackid_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::usepropsinpackid() const {
  // @@protoc_insertion_point(field_get:GameProto.PlayerInput.usePropsInPackID)
  return usepropsinpackid_;
}
inline void PlayerInput::set_usepropsinpackid(::google::protobuf::int32 value) {
  
  usepropsinpackid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.PlayerInput.usePropsInPackID)
}

// -------------------------------------------------------------------

// RoomInfo

// optional int32 id = 1;
inline void RoomInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::id() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.id)
  return id_;
}
inline void RoomInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.id)
}

// optional int32 roundTime = 2;
inline void RoomInfo::clear_roundtime() {
  roundtime_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::roundtime() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.roundTime)
  return roundtime_;
}
inline void RoomInfo::set_roundtime(::google::protobuf::int32 value) {
  
  roundtime_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.roundTime)
}

// optional int32 roundNumber = 3;
inline void RoomInfo::clear_roundnumber() {
  roundnumber_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::roundnumber() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.roundNumber)
  return roundnumber_;
}
inline void RoomInfo::set_roundnumber(::google::protobuf::int32 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.roundNumber)
}

// optional string roomName = 4;
inline void RoomInfo::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomInfo::roomname() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.roomName)
}
inline void RoomInfo::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoomInfo.roomName)
}
inline void RoomInfo::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoomInfo.roomName)
}
inline ::std::string* RoomInfo::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomInfo::release_roomname() {
  // @@protoc_insertion_point(field_release:GameProto.RoomInfo.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoomInfo.roomName)
}

// optional string mapName = 5;
inline void RoomInfo::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomInfo::mapname() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.mapName)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_mapname(const ::std::string& value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.mapName)
}
inline void RoomInfo::set_mapname(const char* value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoomInfo.mapName)
}
inline void RoomInfo::set_mapname(const char* value, size_t size) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoomInfo.mapName)
}
inline ::std::string* RoomInfo::mutable_mapname() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.mapName)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomInfo::release_mapname() {
  // @@protoc_insertion_point(field_release:GameProto.RoomInfo.mapName)
  
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    
  } else {
    
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoomInfo.mapName)
}

// optional string password = 6;
inline void RoomInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomInfo::password() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.password)
}
inline void RoomInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.RoomInfo.password)
}
inline void RoomInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.RoomInfo.password)
}
inline ::std::string* RoomInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomInfo::release_password() {
  // @@protoc_insertion_point(field_release:GameProto.RoomInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameProto.RoomInfo.password)
}

// optional int32 maxPlayers = 7;
inline void RoomInfo::clear_maxplayers() {
  maxplayers_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::maxplayers() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.maxPlayers)
  return maxplayers_;
}
inline void RoomInfo::set_maxplayers(::google::protobuf::int32 value) {
  
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.maxPlayers)
}

// optional int32 curPlayerNumber = 8;
inline void RoomInfo::clear_curplayernumber() {
  curplayernumber_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::curplayernumber() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.curPlayerNumber)
  return curplayernumber_;
}
inline void RoomInfo::set_curplayernumber(::google::protobuf::int32 value) {
  
  curplayernumber_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.curPlayerNumber)
}

// repeated .GameProto.PlayerInfo Players = 9;
inline int RoomInfo::players_size() const {
  return players_.size();
}
inline void RoomInfo::clear_players() {
  players_.Clear();
}
inline const ::GameProto::PlayerInfo& RoomInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.Players)
  return players_.Get(index);
}
inline ::GameProto::PlayerInfo* RoomInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.RoomInfo.Players)
  return players_.Mutable(index);
}
inline ::GameProto::PlayerInfo* RoomInfo::add_players() {
  // @@protoc_insertion_point(field_add:GameProto.RoomInfo.Players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo >*
RoomInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.RoomInfo.Players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInfo >&
RoomInfo::players() const {
  // @@protoc_insertion_point(field_list:GameProto.RoomInfo.Players)
  return players_;
}

// optional int32 master = 10;
inline void RoomInfo::clear_master() {
  master_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::master() const {
  // @@protoc_insertion_point(field_get:GameProto.RoomInfo.master)
  return master_;
}
inline void RoomInfo::set_master(::google::protobuf::int32 value) {
  
  master_ = value;
  // @@protoc_insertion_point(field_set:GameProto.RoomInfo.master)
}

// -------------------------------------------------------------------

// ClientMsg

// optional .GameProto.ClientEventCode type = 1;
inline void ClientMsg::clear_type() {
  type_ = 0;
}
inline ::GameProto::ClientEventCode ClientMsg::type() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.type)
  return static_cast< ::GameProto::ClientEventCode >(type_);
}
inline void ClientMsg::set_type(::GameProto::ClientEventCode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ClientMsg.type)
}

// optional .GameProto.PlayerInfo playerinfo = 2;
inline bool ClientMsg::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
inline void ClientMsg::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
inline const ::GameProto::PlayerInfo& ClientMsg::playerinfo() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.playerinfo)
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::GameProto::PlayerInfo* ClientMsg::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::GameProto::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.playerinfo)
  return playerinfo_;
}
inline ::GameProto::PlayerInfo* ClientMsg::release_playerinfo() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.playerinfo)
  
  ::GameProto::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_playerinfo(::GameProto::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.playerinfo)
}

// optional .GameProto.PlayerInput input = 3;
inline bool ClientMsg::has_input() const {
  return !_is_default_instance_ && input_ != NULL;
}
inline void ClientMsg::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
inline const ::GameProto::PlayerInput& ClientMsg::input() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
inline ::GameProto::PlayerInput* ClientMsg::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::GameProto::PlayerInput;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.input)
  return input_;
}
inline ::GameProto::PlayerInput* ClientMsg::release_input() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.input)
  
  ::GameProto::PlayerInput* temp = input_;
  input_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_input(::GameProto::PlayerInput* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.input)
}

// optional .GameProto.RoomInfo roominfo = 4;
inline bool ClientMsg::has_roominfo() const {
  return !_is_default_instance_ && roominfo_ != NULL;
}
inline void ClientMsg::clear_roominfo() {
  if (GetArenaNoVirtual() == NULL && roominfo_ != NULL) delete roominfo_;
  roominfo_ = NULL;
}
inline const ::GameProto::RoomInfo& ClientMsg::roominfo() const {
  // @@protoc_insertion_point(field_get:GameProto.ClientMsg.roominfo)
  return roominfo_ != NULL ? *roominfo_ : *default_instance_->roominfo_;
}
inline ::GameProto::RoomInfo* ClientMsg::mutable_roominfo() {
  
  if (roominfo_ == NULL) {
    roominfo_ = new ::GameProto::RoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ClientMsg.roominfo)
  return roominfo_;
}
inline ::GameProto::RoomInfo* ClientMsg::release_roominfo() {
  // @@protoc_insertion_point(field_release:GameProto.ClientMsg.roominfo)
  
  ::GameProto::RoomInfo* temp = roominfo_;
  roominfo_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_roominfo(::GameProto::RoomInfo* roominfo) {
  delete roominfo_;
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ClientMsg.roominfo)
}

// -------------------------------------------------------------------

// ServerMsg

// optional .GameProto.ServerEventCode type = 1;
inline void ServerMsg::clear_type() {
  type_ = 0;
}
inline ::GameProto::ServerEventCode ServerMsg::type() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.type)
  return static_cast< ::GameProto::ServerEventCode >(type_);
}
inline void ServerMsg::set_type(::GameProto::ServerEventCode value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.type)
}

// optional int32 fid = 2;
inline void ServerMsg::clear_fid() {
  fid_ = 0;
}
inline ::google::protobuf::int32 ServerMsg::fid() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.fid)
  return fid_;
}
inline void ServerMsg::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.fid)
}

// optional string str = 3;
inline void ServerMsg::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerMsg::str() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMsg::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.str)
}
inline void ServerMsg::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerMsg.str)
}
inline void ServerMsg::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerMsg.str)
}
inline ::std::string* ServerMsg::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMsg::release_str() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMsg::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.str)
}

// optional string ip = 4;
inline void ServerMsg::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerMsg::ip() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMsg::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.ip)
}
inline void ServerMsg::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerMsg.ip)
}
inline void ServerMsg::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerMsg.ip)
}
inline ::std::string* ServerMsg::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMsg::release_ip() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMsg::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.ip)
}

// optional int32 port = 5;
inline void ServerMsg::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ServerMsg::port() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.port)
  return port_;
}
inline void ServerMsg::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.port)
}

// optional .GameProto.PlayerInfo playerInfo = 6;
inline bool ServerMsg::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
inline void ServerMsg::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
inline const ::GameProto::PlayerInfo& ServerMsg::playerinfo() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.playerInfo)
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::GameProto::PlayerInfo* ServerMsg::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::GameProto::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.playerInfo)
  return playerinfo_;
}
inline ::GameProto::PlayerInfo* ServerMsg::release_playerinfo() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMsg.playerInfo)
  
  ::GameProto::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void ServerMsg::set_allocated_playerinfo(::GameProto::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMsg.playerInfo)
}

// optional int32 framID = 7;
inline void ServerMsg::clear_framid() {
  framid_ = 0;
}
inline ::google::protobuf::int32 ServerMsg::framid() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.framID)
  return framid_;
}
inline void ServerMsg::set_framid(::google::protobuf::int32 value) {
  
  framid_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMsg.framID)
}

// repeated .GameProto.PlayerInput inputs = 8;
inline int ServerMsg::inputs_size() const {
  return inputs_.size();
}
inline void ServerMsg::clear_inputs() {
  inputs_.Clear();
}
inline const ::GameProto::PlayerInput& ServerMsg::inputs(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.inputs)
  return inputs_.Get(index);
}
inline ::GameProto::PlayerInput* ServerMsg::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.inputs)
  return inputs_.Mutable(index);
}
inline ::GameProto::PlayerInput* ServerMsg::add_inputs() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >*
ServerMsg::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerInput >&
ServerMsg::inputs() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.inputs)
  return inputs_;
}

// repeated .GameProto.PlayerState states = 9;
inline int ServerMsg::states_size() const {
  return states_.size();
}
inline void ServerMsg::clear_states() {
  states_.Clear();
}
inline const ::GameProto::PlayerState& ServerMsg::states(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.states)
  return states_.Get(index);
}
inline ::GameProto::PlayerState* ServerMsg::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.states)
  return states_.Mutable(index);
}
inline ::GameProto::PlayerState* ServerMsg::add_states() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.states)
  return states_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >*
ServerMsg::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.states)
  return &states_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::PlayerState >&
ServerMsg::states() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.states)
  return states_;
}

// repeated .GameProto.RoomInfo roominfos = 10;
inline int ServerMsg::roominfos_size() const {
  return roominfos_.size();
}
inline void ServerMsg::clear_roominfos() {
  roominfos_.Clear();
}
inline const ::GameProto::RoomInfo& ServerMsg::roominfos(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMsg.roominfos)
  return roominfos_.Get(index);
}
inline ::GameProto::RoomInfo* ServerMsg::mutable_roominfos(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMsg.roominfos)
  return roominfos_.Mutable(index);
}
inline ::GameProto::RoomInfo* ServerMsg::add_roominfos() {
  // @@protoc_insertion_point(field_add:GameProto.ServerMsg.roominfos)
  return roominfos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo >*
ServerMsg::mutable_roominfos() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.ServerMsg.roominfos)
  return &roominfos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::RoomInfo >&
ServerMsg::roominfos() const {
  // @@protoc_insertion_point(field_list:GameProto.ServerMsg.roominfos)
  return roominfos_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameProto::ServerEventCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::ServerEventCode>() {
  return ::GameProto::ServerEventCode_descriptor();
}
template <> struct is_proto_enum< ::GameProto::ClientEventCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::ClientEventCode>() {
  return ::GameProto::ClientEventCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fproto_2eproto__INCLUDED
